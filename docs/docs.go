// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "25076778@qq.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/login": {
            "post": {
                "description": "用户登录",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "登录相关"
                ],
                "summary": "登录",
                "parameters": [
                    {
                        "description": "登录参数",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "登录成功",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/errcode.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/v1.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/errcode.ArgsErrorResponse"
                        }
                    },
                    "500": {
                        "description": "系统错误",
                        "schema": {
                            "$ref": "#/definitions/errcode.SystemErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "responses": {}
            }
        }
    },
    "definitions": {
        "errcode.ArgsErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "data": {},
                "msg": {
                    "type": "string",
                    "example": "Invalid arguments"
                }
            }
        },
        "errcode.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 0
                },
                "data": {},
                "msg": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "errcode.SystemErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "data": {},
                "msg": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "model.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "年龄",
                    "type": "integer"
                },
                "avatar": {
                    "description": "头像",
                    "type": "string"
                },
                "createdAt": {
                    "description": "创建时间",
                    "type": "string"
                },
                "deletedAt": {
                    "description": "删除时间",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeletedAt"
                        }
                    ]
                },
                "email": {
                    "description": "邮箱",
                    "type": "string"
                },
                "fullName": {
                    "description": "姓名",
                    "type": "string"
                },
                "gender": {
                    "description": "性别 1=男 2=女",
                    "type": "integer"
                },
                "id": {
                    "description": "ID",
                    "type": "integer"
                },
                "nickname": {
                    "description": "昵称",
                    "type": "string"
                },
                "password": {
                    "description": "密码",
                    "type": "string"
                },
                "status": {
                    "description": "状态 1=启用 2=停用",
                    "type": "integer"
                },
                "updatedAt": {
                    "description": "更新时间",
                    "type": "string"
                },
                "username": {
                    "description": "用户名",
                    "type": "string"
                }
            }
        },
        "request.UserLogin": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "v1.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/v1.Token"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "v1.Token": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "refreshTokenExpire": {
                    "type": "integer",
                    "example": 172800
                },
                "tokenExpire": {
                    "type": "integer",
                    "example": 7200
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "127.0.0.1:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Gin Swagger API",
	Description:      "Gin API 文档",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
